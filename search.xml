<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>翡翠鉴定入门</title>
      <link href="/2024/09/26/%E7%BF%A1%E7%BF%A0%E9%89%B4%E5%AE%9A%E5%85%A5%E9%97%A8/"/>
      <url>/2024/09/26/%E7%BF%A1%E7%BF%A0%E9%89%B4%E5%AE%9A%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="翡翠鉴定入门"><a href="#翡翠鉴定入门" class="headerlink" title="翡翠鉴定入门"></a>翡翠鉴定入门</h1><p>感觉人到中年，就会对这些东西开始感兴趣。（bushi</p><p>最近总是在抖音上刷到翡翠的视频，看别人大刀阔斧的收购翡翠原料，和翡翠成品的精美。以及早些年母亲在这上面被人坑过。所以想做一个简单的总结。</p><h2 id="如何鉴定翡翠真假"><a href="#如何鉴定翡翠真假" class="headerlink" title="如何鉴定翡翠真假"></a>如何鉴定翡翠真假</h2><p>通过计算密度来确定。这种方法比较科学。翡翠的密度 <code>3.3 ～ 3.36</code>。</p><p>步骤如下：</p><ol><li>对翡翠称重，标记为<code>m1</code>克。</li><li>将装3&#x2F;4水的杯子放在电子称上，即为去皮</li><li>将翡翠用细绳子悬在水杯中间，<strong>保证翡翠完全没入水中，下不触底，上不触顶</strong>，此时重量为<code>m2</code>克</li><li>计算密度, <code>m1/m2</code>。对比翡翠密度即可判断。</li></ol><h2 id="翡翠价值判定"><a href="#翡翠价值判定" class="headerlink" title="翡翠价值判定"></a>翡翠价值判定</h2><h3 id="判别翡翠A货"><a href="#判别翡翠A货" class="headerlink" title="判别翡翠A货"></a>判别翡翠A货</h3><p>翡翠分为A、B、C评级。<br>A货：没有经过人工处理的天然翡翠。<br>B货：人工主角<br>其中B，C都是经过人为处理过的，不是纯天然的玉石。所以最好是购买A货。</p><p><strong>如何判断A货</strong>：<br>B+C货：酸蚀处理，进行过人工填充。长期佩戴对人有害。可以通过排除法来识别A货。</p><p>B+C可以如下判定：</p><ol><li>表面油脂光泽，光斑边界模糊。</li><li>灯光下紫色荧光，紫光灯下荧光更明显。</li><li>表面蜘蛛网状的酸蚀网纹，颜色形状像蜘蛛网。</li></ol><h3 id="判断翡翠价值"><a href="#判断翡翠价值" class="headerlink" title="判断翡翠价值"></a>判断翡翠价值</h3><p>种、水、色分开看。<br>种：分为种细种粗。种指的是翡翠底子，判别种质是否细腻干净。<br>水：水头指的是透明度。越透水头越好。<br>色：底色，飘色。</p><p>种水色都有为最好的，没有种的是最差的。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 玉石古玩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>许三观卖血记/ 小记</title>
      <link href="/2024/09/24/%E8%AE%B8%E4%B8%89%E8%A7%82%E5%8D%96%E8%A1%80%E8%AE%B0%E5%B0%8F%E8%AE%B0/"/>
      <url>/2024/09/24/%E8%AE%B8%E4%B8%89%E8%A7%82%E5%8D%96%E8%A1%80%E8%AE%B0%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="读书记录"><a href="#读书记录" class="headerlink" title="读书记录"></a>读书记录</h1><p><em>余华 - 第三版</em></p><p>书名基本交代了故事的内容，许三观的卖血贯穿全文。</p><p>第一次卖血娶老婆，娶得玉兰当媳妇。</p><p>第二次卖血赎家当，也为了堵上孩子们打架把瓦匠家儿子头打破的窟窿。</p><p>第三次是为出轨，为初恋林芬芳，也为了发泄。</p><p>第四次是为生计，荒年看着孩子们每天都吃不饱，于是卖血让家人吃上好吃的。</p><p>第五次为了孩子的前途，为了孩子能够早点回到城里来，所以卖血巴结二乐的队长。</p><p>第六次是为了救孩子，一乐得了肝炎，需要送往上海大医院，急需用钱。（多次卖血，这里统称为第六次）</p><p>第七次是怀恋，老了还想吃猪肝和黄酒，想吃这些，自然就会想到卖血。</p><p>卖血是许三观一生的支撑，支撑他生活的重要节点。</p><p>一开始的卖血是好奇，但后面的卖血基本都是救急，哪怕是在身边已经有人卖血导致死亡，还是义无反顾，一来是因为经济低下，另一方面卖血带来的收入，相对于务农和做工，确实可观。这样的事情，在现在仍有发生，只是现在血库没有那么稀缺，而且卖血已经被明令禁止。许多的水滴筹事故，我想那些亲人短期也无法筹到天价救命钱，那么他们又要如何应对，我不敢想象。</p><p>许三观这一生，从个人角度来讲，都在于追求平等，他的这个平等不是真正的平等，<span style="background: #ffeb3b;">“而是和邻居一样，和他所认识的那些人一样。他不在乎生活的好坏，但是不能容忍别人和他不一样。”</span>这一点，很多人身上都有投射。（引自韩文版自序）</p><p>所以在他经历了绿帽子（其实谈不上，因为一乐是在玉兰和何小勇好的时候怀上的，那时候还没有许三观什么事儿呢），他有很长一段时间心生芥蒂，开始排斥一乐，但日久终会生情，更何况是自己的孩子。到最后还是慢慢搁下心里的成见，开始将孩子们一视同仁。然后是孩子重病……。虽说坎坷，但最终还是好的结局。</p><p>从大一点的方向，故事从许三观开始，投射到宏观的历史背景中，故事经历了人民公社、大跃进、饥荒、文革、知青上山下乡等时间跨度。相信很多爷爷奶奶辈的人对此也有记忆。我无意去评判这段历史，但是希望尊重它，尊重他们。马提亚尔说：“回忆过去的生活，无异于再活一次。”</p><p>另一个想说的人就是李血头，也是因为回看德文版自序的时候想起来。这样一个人物，我觉得算不上坏当然也不能算好。而且我们周围也有很多<span style="background: #ffeb3b;">这样的人，他们在一个资源的峡口占据着有利的地位，可以控制买卖双方的交易。而且他们一般是略有权势的人，在这样的情况下，他们会扩大自己影响，然后形成一方势力，继续垄断这样一个行业。</span>譬如说这里的李血头，目的就是为了从买卖方抽取一定的利益（第一包血和送来的礼），他们在这样一个位置上有绝对的权利，可以决定谁能做成这个生意（日常孝敬的人）。这就是社会的一个缩影，虽然有些黑暗，但是事实。</p><p>玉兰我觉得是难得的好女人，精明能干。要说许三观能主外，多少也是有了这样一个稳重能干的老婆在撑起整个家。</p><p>整本书的文字都是描写，鲜少有心理刻画。而大段的描写，读起来却不觉得拖沓累赘，读罢还有一气呵成的感觉。</p><p>读此书，犹如看到一个单薄的身影，不紧不慢的在这一段历史中穿梭，踽踽独行。让我跟着他一起，仔仔细细的活了一趟。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 余华 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome特殊设置</title>
      <link href="/2024/09/23/Chrome%E7%89%B9%E6%AE%8A%E8%AE%BE%E7%BD%AE/"/>
      <url>/2024/09/23/Chrome%E7%89%B9%E6%AE%8A%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="web开发中用到的Chrome特殊设置"><a href="#web开发中用到的Chrome特殊设置" class="headerlink" title="web开发中用到的Chrome特殊设置"></a>web开发中用到的<code>Chrome</code>特殊设置</h1><h2 id="允许http开头的网站访问流媒体"><a href="#允许http开头的网站访问流媒体" class="headerlink" title="允许http开头的网站访问流媒体"></a>允许http开头的网站访问流媒体</h2><p>开发者在有些场合需要在非localhost场景下用到<code>麦克风权限</code>，这时因为chrome识别http作为not secure，不允许访问，这时这种设置就派上用场了。</p><p>chrome浏览器打开网址：<code>chrome://flags/#unsafely-treat-insecure-origin-as-secure</code></p><p>在对话框中输入地址，并启用。</p><h2 id="监控webrtc的上下行日志"><a href="#监控webrtc的上下行日志" class="headerlink" title="监控webrtc的上下行日志"></a>监控webrtc的上下行日志</h2><p>在浏览器接收 <code>webrtc</code> 流的时候，出现故障时可以查看日志来判定是 <em>接收端</em> 还是 <em>发送端</em> 。而这种日志的入口就隐藏在chrome地址栏中。</p><p>chrome浏览器打开网址：<code>chrome://webrtc-internals/</code></p><p>进入目标域名下的页签去查找。这里不赘述如何查看，如果感兴趣的话，后面可以单开一篇来细说。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济观察</title>
      <link href="/2024/09/19/%E7%BB%8F%E6%B5%8E%E8%A7%82%E5%AF%9F/"/>
      <url>/2024/09/19/%E7%BB%8F%E6%B5%8E%E8%A7%82%E5%AF%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="美联储将息-50-bp"><a href="#美联储将息-50-bp" class="headerlink" title="美联储将息 50 bp"></a>美联储将息 50 bp</h1><blockquote><p>决定美联储加息和降息的最重要的经济指标，一是通胀，二是失业率。</p></blockquote><p><img src="https://pic2.zhimg.com/80/v2-2ff59598560c2b6cbff4a92ebbe3d915_1440w.webp" alt="2022年以来美国的通胀和失业率变化情况"></p>]]></content>
      
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济 </tag>
            
            <tag> 降息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找</title>
      <link href="/2024/09/19/%E6%9F%A5%E6%89%BE/"/>
      <url>/2024/09/19/%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><blockquote><p>前提条件是：数组是有序的</p><p>时间复杂度：O(logn)，空间复杂度 O(1)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">binarySearch</span> = (<span class="params">list, item</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> low = <span class="number">0</span>, high = list.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(low &lt;= high) &#123;</span><br><span class="line">    mid = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(low + (high - low) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> temp = list[mid];</span><br><span class="line">    <span class="keyword">if</span> (temp === item) <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (temp &gt; item) &#123;</span><br><span class="line">      high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><p>广度优先搜索可回答两类问题：<br><br>第一类问题：从节点A出发，有前往节点B的路径吗？<br><br>第二类问题：从节点A出发，前往节点B的哪条路径最短？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">bfs</span> = (<span class="params">list, item, step = <span class="number">1</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">while</span>(list.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> current = list.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="keyword">if</span> (current.<span class="property">key</span> === item) <span class="keyword">return</span> current;</span><br><span class="line">    <span class="keyword">if</span> (current.<span class="property">children</span>) list.<span class="title function_">push</span>(...current.<span class="property">children</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h2><pre><code class="javascript">const dfs = (list, item) =&gt; &#123;  &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2024/09/19/%E6%8E%92%E5%BA%8F/"/>
      <url>/2024/09/19/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><blockquote><p>每次都从剩下的元素中找出最大&#x2F;最小元素</p></blockquote><blockquote><p>时间复杂度: O(n**2), 空间复杂度：O(n)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sort</span> = (<span class="params">arr, asc = <span class="literal">true</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> n = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> arr1 = [...arr];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="keyword">const</span> temp = asc ? arr1[j] - arr1[i] : arr1[i] - arr1[j];</span><br><span class="line">      <span class="keyword">if</span> (temp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> t = arr1[i];</span><br><span class="line">        arr1[i] = arr1[j];</span><br><span class="line">        arr1[j] = t;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><blockquote><p>快速排序是基于DC(divide &amp; conquer)算法实现，每次循环随机从当前列表中取出一个元素基准值<code>pivot</code>，然后将剩余元素按照基准值比较大小，分为左右两子列表。不断迭代，直到最后剩下一个&#x2F;零个元素。<br>基线条件：最后剩下一个&#x2F;零个元素，递归条件：以基准值将原列表一分为二。</p></blockquote><blockquote><p>时间复杂度: O(nlogn), 空间复杂度：O(n)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">quickSort</span> = (<span class="params">arr, asc = <span class="literal">true</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pivot = arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> left = [], right = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; pivot) &#123;</span><br><span class="line">      right.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      left.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (asc) &#123;</span><br><span class="line">    <span class="keyword">return</span> [...<span class="title function_">quickSort</span>(left, asc), pivot, ...<span class="title function_">quickSort</span>(right, asc)];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [...<span class="title function_">quickSort</span>(right, asc), pivot, ...<span class="title function_">quickSort</span>(left, asc)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element表单动态校验</title>
      <link href="/2024/06/13/element%E8%A1%A8%E5%8D%95%E5%8A%A8%E6%80%81%E6%A0%A1%E9%AA%8C/"/>
      <url>/2024/06/13/element%E8%A1%A8%E5%8D%95%E5%8A%A8%E6%80%81%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>业务上经常会遇到需要动态增加输入内容或者删除，这就涉及到动态表单。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> vue </tag>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa搭建服务</title>
      <link href="/2024/05/13/koa%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1/"/>
      <url>/2024/05/13/koa%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="koa介绍"><a href="#koa介绍" class="headerlink" title="koa介绍"></a>koa介绍</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Koa 是一个新的 web 框架，由 Express 幕后的原班人马打造， 致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。</p></blockquote><h2 id="koa优势"><a href="#koa优势" class="headerlink" title="koa优势"></a>koa优势</h2><ul><li>支持 async 函数，异步处理操作舒适</li><li>没有捆绑任何中间件，体积更小，更灵活</li></ul><h2 id="适合场景"><a href="#适合场景" class="headerlink" title="适合场景"></a>适合场景</h2><ul><li>轻量级服务</li><li>服务代理转发，付费接口代理等</li></ul><h1 id="使用koa搭建简单的服务"><a href="#使用koa搭建简单的服务" class="headerlink" title="使用koa搭建简单的服务"></a>使用koa搭建简单的服务</h1><h2 id="基础服务"><a href="#基础服务" class="headerlink" title="基础服务"></a>基础服务</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router  = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制传输大小</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>(&#123;</span><br><span class="line">  <span class="attr">jsonLimit</span>: <span class="string">&#x27;3mb&#x27;</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置访问路由</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>())</span><br><span class="line">  .<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running on http://localhost:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;@koa/router&#x27;</span>);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="title function_">async</span>(ctx, next) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&quot;登录成功&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上两个基本可以实现简单的多请求地址访问。简单一点的数据存储和访问我们可以加入redis。</p><h2 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// redis.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Redis</span> = <span class="built_in">require</span>(<span class="string">&#x27;ioredis&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> redis = <span class="keyword">new</span> <span class="title class_">Redis</span>(); <span class="comment">// 默认连接到本地Redis服务器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">set</span> = <span class="keyword">async</span>(<span class="params">key, value, expire</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> redis.<span class="title function_">set</span>(key, value);</span><br><span class="line">  <span class="keyword">if</span> (expire) &#123;</span><br><span class="line">    <span class="keyword">await</span> redis.<span class="title function_">expire</span>(key, expire);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">get</span> = <span class="keyword">async</span>(<span class="params">key</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">await</span> redis.<span class="title function_">get</span>(key);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  get,</span><br><span class="line">  set,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>目前还没有用到，现挖个坑。后面用到了补充。</p><h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><p>koa官网有个比较经典的例子.</p><h2 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h2><blockquote><p>Koa 中间件以更传统的方式级联，您可能习惯使用类似的工具 - 之前难以让用户友好地使用 node 的回调。然而，使用 async 功能，我们可以实现 “真实” 的中间件。对比 Connect 的实现，通过一系列功能直接传递控制，直到一个返回，Koa 调用“下游”，然后控制流回“上游”。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="keyword">const</span> rt = ctx.<span class="property">response</span>.<span class="title function_">get</span>(<span class="string">&#x27;X-Response-Time&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;ctx.method&#125;</span> <span class="subst">$&#123;ctx.url&#125;</span> - <span class="subst">$&#123;rt&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// x-response-time</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="keyword">const</span> ms = <span class="title class_">Date</span>.<span class="title function_">now</span>() - start;</span><br><span class="line">  ctx.<span class="title function_">set</span>(<span class="string">&#x27;X-Response-Time&#x27;</span>, <span class="string">`<span class="subst">$&#123;ms&#125;</span>ms`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>这就是koa典型的洋葱模型。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/461dbf9917634fe1a1b578237ad78600~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" width="50%" height="50%" align="center" alt="洋葱模型图">]]></content>
      
      
      <categories>
          
          <category> node后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>健身随笔</title>
      <link href="/2024/05/10/%E5%81%A5%E8%BA%AB%E9%9A%8F%E7%AC%94/"/>
      <url>/2024/05/10/%E5%81%A5%E8%BA%AB%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<p>健身时拍下了手套，这是左手。右手没有这么明显的破损。</p><div align=center><img src="/img/202405/glove.png" width="400" alt="手套破损照"></div><h1 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h1><p>算下来，健身断断续续也有了2年时间吧。虽然每次逢年过节会中止。那今年从年初算到现在也有了接近3个月的时间了。</p><p>从一开始的进去健身房就开始害羞，和不敢随便玩器械，怕出丑。到最近可以开始穿健身背心，突然get到了这件事情的重心，那就是健身而已。</p><p>穿什么样的衣服，用什么样的器械，喝什么样的粉剂，无非是为了有更好更强大的身材。除此之外，没有必要觉得羞愧。</p><p>从一开始的靠墙滑臂做不了，到现在轻松自如。从开始的浑身无力，到现在可以36KG推胸，20KG拉臂。虽然现在也没有很强，但是也一直在努力，在进步…</p><p>而且养成了良好的习惯。</p><p>之前会和同事搭档去健身房，后来也因为同事多病体质，隔三差五缺席。现在可以随意在健身房和其他同事搭档，甚至是自己一个人也可以按照计划训练下去。</p><p>这让我养成了独立的习惯。</p><h1 id="有形和无形的努力"><a href="#有形和无形的努力" class="headerlink" title="有形和无形的努力"></a>有形和无形的努力</h1><p>健身是一个付出就会有回报的事情，而且回报周期还不长。一般前面新手期效果明显，后面增长曲线就会放缓。和大部分的事情一样。</p><p>而自我成长，则是在很多无人的时候，需要自我激励和监督，往往前期很长的一段时间里，可能都无法取得肉眼可见的效果，甚至会让人怀疑和止步。</p><p>但就像栽种一颗树苗一样，最好的时间是十年前，其次是现在。</p><h1 id="男人的刀疤"><a href="#男人的刀疤" class="headerlink" title="男人的刀疤"></a>男人的刀疤</h1><p>说回健身的手套，虽然它有些破损。但我突然会觉得它就像男人的刀疤一样，是一个人的精神见证。</p><p>会随着岁月的沉淀，慢慢的为它的主人披上奋斗的铠甲。</p><p>最后，希望各位都有一个健康的身体～</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端自适应方案</title>
      <link href="/2024/05/09/%E8%87%AA%E9%80%82%E5%BA%94/"/>
      <url>/2024/05/09/%E8%87%AA%E9%80%82%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<p>web自适应指的是设计稿给出的往往只有单一尺寸，例如1920 * 1080。但是实际的web使用者分辨率各异，所以需要做适配方案。</p><p>一般需要全局适配的，主要是H5和大屏。后台项目只需要简单做一些过渡即可，@media媒体查询完全够用。</p><blockquote><p><a href="https://www.cnblogs.com/zhangnan35/p/12682925.html">移动端布局之postcss-px-to-viewport（兼容vant）【更新于2021&#x2F;09&#x2F;27】 </a></p></blockquote><p>目前全局适配的方案，比较流行的有两种 px-to-rem 和 px-to-viewport。两者思路基本一致，都是将px转为相对单位 rem 和 vw。</p><p>安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add postcss-px-to-viewport -D</span><br></pre></td></tr></table></figure><p>先说说刚刚看完的px-to-viewport。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// base.scss</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@use</span> <span class="string">&quot;sass:math&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设计稿尺寸</span></span><br><span class="line"><span class="variable">$design_width</span>: <span class="number">1920</span>;</span><br><span class="line"><span class="variable">$design_height</span>: <span class="number">1080</span>;</span><br><span class="line"><span class="comment">// 最小字体</span></span><br><span class="line"><span class="variable">$min_font_size</span>: <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尺寸转换</span></span><br><span class="line"><span class="keyword">@function</span> vw(<span class="variable">$px</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> math.div(<span class="variable">$px</span>, <span class="variable">$design_width</span>) * <span class="number">100vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尺寸转换（高度）</span></span><br><span class="line"><span class="comment">// 通常情况下，以宽度来计算就行，除非极端要求和设计稿在任何尺寸下都是满屏（不建议）</span></span><br><span class="line"><span class="keyword">@function</span> vh(<span class="variable">$px</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> math.div(<span class="variable">$px</span>, <span class="variable">$design_height</span>) * <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字体转换</span></span><br><span class="line"><span class="keyword">@function</span> font(<span class="variable">$px</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> math.div(<span class="variable">$px</span>, <span class="variable">$design_width</span>) * <span class="number">100vw</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过vue.config.js 挂载到全局</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">      <span class="attr">sass</span>: &#123;</span><br><span class="line">        <span class="attr">prependData</span>: <span class="string">`@import &quot;@/style/base.scss&quot;;`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.demo &#123;</span><br><span class="line">width: vw(100);</span><br><span class="line">height: vw(300);</span><br><span class="line">font-size: font(30);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>vite + vue3 实际操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// vue.conifg.js</span><br><span class="line">import pxtovw from <span class="string">&#x27;postcss-px-to-viewport&#x27;</span></span><br><span class="line"></span><br><span class="line">const loader_pxtovw = pxtovw(&#123;</span><br><span class="line">  viewportWidth: 6138,</span><br><span class="line">  viewportUnit: <span class="string">&#x27;vw&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default defineConfig(&#123;</span><br><span class="line">  base: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">  css: &#123;</span><br><span class="line">    postcss: &#123;</span><br><span class="line">      plugins: [loader_pxtovw]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 自适应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的操作符</title>
      <link href="/2024/05/09/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <url>/2024/05/09/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="空值合并操作符"><a href="#空值合并操作符" class="headerlink" title="空值合并操作符 - ??"></a>空值合并操作符 - ??</h1><blockquote><p>空值合并操作符（Nullish Coalescing Operator），它使用两个问号 <code>??</code>。这是在处理可能为 <code>null</code> 或 <code>undefined</code> 的值时很有用的一种操作符。</p></blockquote><p>举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value1 = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> value2 = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = value1 ?? value2;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：&quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用</title>
      <link href="/2024/05/08/Hexo%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/05/08/Hexo%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>欢迎访问 <a href="https://hexo.io/">Hexo</a>! 这是本站第一篇文章. 你可以随时访问 <a href="https://hexo.io/docs/">官网文档</a> 获得更多信息. 如果你在使用过程中遇到任何问题，可以在 <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> 查找答案，或者直接去 <a href="https://github.com/hexojs/hexo/issues">GitHub</a> 提问。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到远程服务器"><a href="#部署到远程服务器" class="headerlink" title="部署到远程服务器"></a>部署到远程服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="修改主题-Butterfly"><a href="#修改主题-Butterfly" class="headerlink" title="修改主题 - Butterfly"></a>修改主题 - Butterfly</h2><p>自带主题有点单调，所以考虑更换为其他主题。 可以访问<a href="https://butterfly.js.org/">Buttefly官网</a>获得效果预览，和<a href="https://butterfly.js.org/posts/21cfbf15/">快速开始</a>文档。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hexo-theme-butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
